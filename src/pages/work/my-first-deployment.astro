---
import Layout from '../../layouts/Layout.astro';

export const frontmatter = {
  title: "My First Deployment",
  pubDate: "2025-06-20",
  description: "How I deployed my first project using GitHub Pages."
};
---
<Layout>
  <main class="main-content">
    <h1 class="main-title">My First Deployment</h1>

    <p>I was excited about this project &mdash; this is the first project I deployed to Github Pages! In this blog, I will walk through the hiccups I went through, what technologies I used, and things that you should probably keep in mind for first time website deployers.</p>

    <section id="why-i-started">
      <h2 class="section-title">Why I Started This Portfolio as a Beginner</h2>
      <p>As I mentioned in my previous blog, after exploring different career paths, I eventually landed on front-end web development. I was drawn to it because it allows me to bring designs to life and see immediate results from my work. Whether you're aiming for an office job or freelance gigs, having a portfolio is essential. That's why I decided to start building one early—even as a beginner—so I could start applying for work and track my progress as I grow.</p>

      <p>This portfolio also happens to be one of the final projects required to earn the <strong>Responsive Web Design certification</strong> from freeCodeCamp, which gave me the push I needed to start.</p>
    </section>

    <section id="learning-while-building">
      <h2 class="section-title">Learning While Building</h2>
      <p>Overall, this project wasn’t too difficult for me because I had already spent time learning HTML and CSS by building small projects through freeCodeCamp and getting help from ChatGPT. I also had a clear idea of how I wanted to structure the site from the beginning, which made the process smoother. I’ll talk more about the tools I used in a later section.</p> 
      
      <p>That said, CSS Grid was new to me. I had just learned it while working toward the “Responsive Web Design” certification on freeCodeCamp. I also used it in one of the required projects. I’m still learning how to use it effectively, and I know it will take a long time to truly master. But applying it here gave me some real practice.</p> 
      
      <p>I also picked up a few lessons from the problems I ran into, which I’ll cover in a separate section.</p>
    </section>

    <section id="mistakes-i-made" class="problems-section">
      <h2 class="section-title">Mistakes I Made (And What They Taught Me)</h2>

      <p>Even seasoned developers run into bugs or overlook simple things — and I experienced the same. But each mistake turned into a learning opportunity.</p>

      <p>Let's dive right in!</p>

      <h3 class="subheading">The CTA Button Wouldn’t Shift Down as Expected</h3>

      <p><strong>Reason:</strong> In my original layout, both the <code>.navbar</code> and <code>.hero-title</code> were placed inside the <code>&lt;header&gt;</code> element. I had applied <code>position: sticky;</code> to the <code>.navbar</code>, but it didn’t work properly — the layout made it unclear which container the sticky behavior was relative to, and the extra content inside <code>&lt;header&gt;</code> interfered with it.</p>

      <p><strong>Fix:</strong> I restructured the layout so that the <code>.navbar</code> became a <code>&lt;nav&gt;</code> inside the <code>&lt;header&gt;</code>, and moved the <code>.hero-title</code> into the <code>&lt;main&gt;</code> section. This separation allowed the <code>position: sticky;</code> on the header to work properly, since it was no longer being affected by the extra content within the same container.</p>


      <h3 class="subheading">The "About Me" Section Didn’t Look Right</h3>
      <p><strong>Reason:</strong> I tried to style the paragraphs with <code>text-align: justify;</code> and <code>text-indent</code> to make it look like a novel. After seeing the result, I didn’t like how it turned out.</p>

      <p><strong>Fix:</strong> I removed the <code>text-indent</code> property, kept the justified text, and added <code>padding-bottom</code> to create space between paragraphs instead.</p>

      <h3 class="subheading">Paragraphs Had Unwanted Space Between Words</h3>
      <p><strong>Reason:</strong> When I checked the site on my mobile phone and on my brother’s monitor, I noticed awkward spaces between words. This was due to <code>text-align: justify;</code>, which stretches words to fill the line width.</p>

      <p><strong>Fix:</strong> I changed <code>letter-spacing</code> from using <code>px</code> to <code>em</code> (for better responsiveness) and added <code>word-wrap</code> and <code>hyphens</code> to help control overflow and reduce gaps.</p>

      <h3 class="subheading">Unordered Lists Looked Cramped</h3>
      <p><strong>Reason:</strong> The <code>&lt;ul&gt;</code> elements didn’t have a defined line height, so by default the items looked too close together.</p>

      <p><strong>Fix:</strong> I added <code>line-height</code> to increase spacing between list items for better readability.</p>

      <h3 class="subheading">The Last <code>.project-tile</code> Card Appeared Shorter Than the Others</h3>
      <p><strong>Reason:</strong> This was expected behavior from CSS Grid. Since the last card appeared in a new row without any other cards to match height with, it shrank to the minimum content height.</p>

      <p><strong>Fix:</strong> I first tried using <code>min-height</code>, but the real solution was setting <code>grid-auto-rows: 1fr;</code>. This made all cards within the grid maintain equal height regardless of how much content they had.</p>

      <h3 class="subheading">Hamburger Toggle Wasn’t Behaving as Expected on Mobile Devices</h3>
      <p><strong>Reason:</strong> This was a specificity issue. I had updated the class names for the hamburger toggle, but my <code>.navbar ul</code> styles inside the <code>@media</code> query were overriding the <code>display: none;</code> rule I had for <code>.nav-menu</code>.</p>

      <p><strong>Fix:</strong> After a few failed attempts, I realized the issue was inconsistent class usage. I replaced all instances of <code>.navbar ul</code> with <code>.nav-menu</code> to make the class usage consistent and avoid conflicts.</p>

      <p>If you’re interested in seeing the steps I took or reviewing the code, you can find it here:  
        <a href="https://github.com/pradhansushil/portfolio" target="_blank" rel="noopener">GitHub Repo</a>
      </p>
    </section>

    <section id="design-decisions">
      <h2 class="section-title">Why I Chose This Design</h2>

      <p>For my portfolio, and most of the sites or apps I create, my focus is on simplicity and functionality. I want users to have the easiest possible experience. To support that, I prioritized accessibility over flashy design elements.</p>

      <h3 class="subheading">Color</h3>
      <p>The color palette I chose reflects my current mental space. I’m not in the best place mentally right now, and I wanted the design to reflect that — a sense of darkness, with a small hint of hope. That personal touch felt honest and helped give my portfolio more character.</p>

      <h3 class="subheading">Responsiveness</h3>
      <p>As mentioned earlier, I used responsive units like <code>em</code>, <code>rem</code>, and percentages for fonts, spacing, and layout. I also used <code>@media</code> queries to ensure the design worked across desktop, tablet, and mobile screen sizes. Some parts of the layout change depending on screen width — for example, I don’t use a navigation toggle on desktop or most tablet views.</p>

      <p>One thing I overlooked was designing mobile-first. I went with a desktop-first approach out of habit. While it didn’t break anything, I know that mobile-first is considered an industry best practice, especially since most users now browse primarily on their phones. I plan to keep that in mind for future projects.</p>
    </section>


    <section id="tools">
      <h2 class="section-title">Tools I Used</h2>

      <p>Here are the main tools and resources I used to build this portfolio:</p>

      <ul class="post-list">
        <li><strong>HTML & CSS:</strong> For structure and styling</li>
        <li><strong>VS Code:</strong> My go-to IDE</li>
        <li><strong>Git & GitHub:</strong> For version control and deployment using GitHub Pages</li>
        <li><strong>ChatGPT:</strong> For planning and problem solving</li>
        <li><strong>freeCodeCamp:</strong> Inspired me to create and include projects in my portfolio</li>
        <li><strong>Firefox DevTools:</strong> To inspect and debug layout issues</li>
      </ul>

      <p>I kept the stack minimal and beginner-friendly, since that’s where I’m at right now. It helped me focus on learning good structure, layout, and styling fundamentals instead of overwhelming myself with too many tools.</p>
    </section>

    <section>
      <h2 class="section-title">What I Would Do Differently Next Time</h2>
      <p>There’s not much I’d change about how I built this project, but a few things come to mind. First, I’d make sure to follow a mobile-first approach instead of starting with the desktop version. It’s a good habit and aligns better with current industry standards.</p>

      <p>I also want to be more organized during the build process — either by being more attentive or using a to-do list or task manager app to track what needs to be done.</p>

      <p>For future projects, I’d like to try using Tailwind CSS or maybe a preprocessor like SASS. I haven’t learned them yet or fully explored what they’re used for, but I know they’re part of the learning path for front-end developers. I'm looking forward to learning how they can help streamline styling and make code more efficient.</p>
    </section>

    <section id="final">
      <h2 class="section-title">Final Thoughts</h2>
      <p>This project was more than just another item to check off my learning path — it was a real chance to put my skills to the test and see how far I’ve come. Even though I’m still a beginner, I learned a lot about how I work, what I need to improve, and where I want to go next as a developer.</p>

      <p>There were challenges along the way, but overcoming them gave me more confidence in my abilities. I know there’s still a long way to go, but that’s part of the process. With every project, I’m learning to build cleaner code, better layouts, and more user-friendly experiences.</p>

      <p>I look forward to revisiting this portfolio later with new skills — maybe rebuilding it using Tailwind or SASS — and continuing to grow, one step at a time.</p>
    </section>
  </main>
</Layout>